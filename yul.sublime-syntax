%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Yul
version: 2
scope: source.yul
file_extensions:
  - yul

variables:

  keywords: |-
    (?x: case)

  support_functions: |-
    (?x: stop|add|sub|mul|div|mod|smod|exp|not|lt|gt|slt|sgt|eq|iszero|and|or|xor|byte|shl|shr|sar|addmod|mulmod|signextend|keccak256|pop|mload|mstore|mstore8|sload|sstore|msize|gas|address|balance|selfbalance|caller|callvalue|calldataload|calldatasize|calldatacopy|extcodesize|calldatacopy|extcodesize|extcodecopy|returndatasize|returndatacopy|extcodehash|create|create2|call|callcode|delegatecall|staticcall|return|revert|selfdestruct|invalid|log0|log1|log2|log3|log4|chainid|origin|gasprice|blockhash|coinbase|timestamp|number|difficulty|gaslimit|basefee)

  id_char: '[a-zA-Z0-9$_]'
  id_first_char: '[a-zA-Z$_]'
  identifier: (?!{{keywords}}\b)({{id_first_char}}{{id_char}}*)

  br: (?!{{id_char}})

  double_quoted_printable: '[ -!#-\[\]-~]'
  single_quoted_printable: '[ -&(-\[\]-~]'

contexts:
  prototype:
    - include: comments

  main:
    - include: defitions
    - include: statements

  defitions:
    - include: function-definitions
    - include: object-definitions

  statements:
    - include: blocks
    - include: keyword-statements
    - include: switch-statements
    - include: for-statements
    - include: if-statements
    - include: expressions

  expressions:
    - include: operators
    - include: literals
    - include: function-calls
    - include: variable-names
    - include: punctuations-commas

  expression:
    - match: (?=[\)\}\]\,\;])
      pop: true
    - include: expressions
    - include: else-pop

###[ BLOCKS ]###

  blocks:
    - match: \{
      scope: punctuation.section.block.begin.sol
      push:
        - block-body

  block:
    - match: \{
      scope: punctuation.section.block.begin.sol
      set:
        - block-body
    - include: else-pop

  block-body:
    - meta_scope: meta.block.yul
    - match: \}
      scope: punctuation.section.block.end.yul
      pop: true
    - include: defitions
    - include: statements

###[ DEFINITIONS ]###

  function-definitions:
    - match: function\b
      scope: keyword.declaration.function.yul
      push:
        - function-meta
        - block
        - function-return
        - parameters
        - function-name

  function-meta:
    - meta_scope: meta.function.yul
    - include: else-pop-immediately

  function-name:
    - match: ({{identifier}}){{br}}
      scope: entity.name.function.yul
      pop: true
    - include: else-pop

  function-return:
    - match: ->
      scope: keyword.declaration.function.return.yul
      set:
        - function-return-parameters
        - parameter-name
    - include: else-pop

  function-return-parameters:
    - match: \,
      scope: punctuation.separator.sequence.yul
      push: parameter-name
    - include: else-pop

  parameters:
    - match: \(
      scope: punctuation.section.group.begin.yul
      set:
        - parameters-body
        - parameter-name
    - include: else-pop

  parameters-body:
    - meta_scope: meta.parens.yul
    - match: \)
      scope: punctuation.section.group.end.yul
      pop: true
    - match: \,
      scope: punctuation.separator.sequence.yul
      push: parameter-name
    - include: else-invalid-symbol

  parameter-name:
    - match: ({{identifier}}{{br}})
      scope: variable.parameter.yul
      pop: true
    - include: else-pop

  object-definitions:
    - match: object\b
      scope: keyword.context.block.yul
      push:
        - block
        - object-literal
    - match: (code|data)\b
      scope: keyword.context.block.yul
      push: block

  object-literal:
    - meta_content_scope: meta.object.identifier.yul
    - include: literals
    - include: else-pop

###[ STATEMENTS ]###

  for-statements:
    - match: for\b
      scope: keyword.control.flow.for.yul
      push:
        - block
        - block
        - expression
        - block

  if-statements:
    - match: if\b
      scope: keyword.control.flow.if.yul
      push:
        - block
        - expression

  switch-statements:
    - match: switch\b
      scope: keyword.control.flow.switch.yul
      push: expression
    - match: case\b
      scope: keyword.control.flow.case.yul
      push:
        - block
        - literal
    - match: default\b
      scope: keyword.control.flow.default.yul
      push: block

  keyword-statements:
    - match: let\b
      scope: keyword.declaration.sol
    - match: leave\b
      scope: keyword.control.flow.leave.sol
    - match: br\b
      scope: keyword.control.flow.br.sol
    - match: continue\b
      scope: keyword.control.flow.continue.sol

###[ EXPRESSIONS ]###

  variable-names:
    - match: ({{identifier}})\s*(\.)
      captures:
        1: variable.other.readwrite.yul
        2: punctuation.accessor.dot.sol
    - match: ({{identifier}}){{br}}
      scope: variable.other.readwrite.yul

  function-calls:
    - match: ({{support_functions}}\s*(?=\())
      scope: support.function.yul
      push:
        - function-call-meta
        - function-call-parens
    - match: (?:{{identifier}})\s*(?=\()
      scope: variable.function.yul
      push:
        - function-call-meta
        - function-call-parens

  function-call-meta:
    - meta_scope: meta.function-call.yul
    - include: else-pop-immediately

  function-call-parens:
    - match: \(
      scope: punctuation.section.group.begin.yul
      set:
        - function-call-body
        - expression
    - include: else-invalid-symbol

  function-call-body:
    - meta_scope: meta.parens.yul
    - match: \)
      scope: punctuation.section.group.end.yul
      pop: true
    - match: \,
      scope: punctuation.separator.sequence.yul
      push: expression
    - include: else-invalid-symbol

###[ OPERATORS ]###

  operators:
    - include: assignments

  assignments:
    - match: (:=)
      scope: keyword.operator.assignment.yul

###[ LITERALS ]###

  literals:
    - include: literals-string-quoted
    - include: literals-string-hex
    - include: decimal-number-literals
    - include: hex-number-literals
    - include: boolean-literals

  literal:
    - include: literals
    - include: else-pop

  boolean-literals:
    - match: true{{br}}
      scope: constant.language.boolean.true.yul
    - match: false{{br}}
      scope: constant.language.boolean.false.yul

  decimal-number-literals:
    - match: ([0-9])+{{br}}
      scope: constant.numeric.value.sol

  hex-number-literals:
    - match: (0x)([\h]*){{br}}
      captures:
        1: constant.numeric.base.sol
        2: constant.numeric.value.sol

  literals-string-quoted:
    - match: \"
      scope: punctuation.definition.string.begin.sol
      push:
        - string-meta
        - literals-string-double-quoted
    - match: \'
      scope: punctuation.definition.string.begin.sol
      push:
        - string-meta
        - literals-string-single-quoted

  literals-string-hex:
    - match: (hex)(\")
      captures:
        1: constant.numeric.base.sol
        2: punctuation.definition.string.begin.sol
      push:
        - string-meta
        - literals-string-hex-number-double-quoted
    - match: (hex)(\')
      captures:
        1: constant.numeric.base.sol
        2: punctuation.definition.string.begin.sol
      push:
        - string-meta
        - literals-string-hex-number-single-quoted

  string-meta:
    - meta_scope: meta.string.sol
    - include: else-pop-immediately

  literals-string-double-quoted:
    - meta_include_prototype: false
    - match: ({{double_quoted_printable}})
      scope: string.quoted.double.sol
    - match: \"
      scope: punctuation.definition.string.end.sol
      pop: true
    - include: illegal-newline
    - include: literals-string-escape-sequence

  literals-string-single-quoted:
    - meta_include_prototype: false
    - match: ({{single_quoted_printable}})
      scope: string.quoted.single.sol
    - match: \'
      scope: punctuation.definition.string.end.sol
      pop: true
    - include: illegal-newline
    - include: literals-string-escape-sequence

  literals-string-hex-number-double-quoted:
    - meta_include_prototype: false
    - match: ([\h_])
      scope: string.quoted.double.sol
    - match: \"
      scope: punctuation.definition.string.end.sol
      pop: true
    - include: illegal-newline

  literals-string-hex-number-single-quoted:
    - meta_include_prototype: false
    - match: ([\h_])
      scope: string.quoted.single.sol
    - match: \'
      scope: punctuation.definition.string.end.sol
      pop: true
    - include: illegal-newline

  literals-string-escape-sequence:
    - match: \\(?:x\h\h|u\h\h\h\h)
      scope: constant.character.escape.sol
    - match: \\[\'\"\\nrt\n\r]
      scope: constant.character.escape.sol

  illegal-newline:
    - match: \n
      scope: invalid.illegal.unexpected-newline.sol
      pop: true


###[ OTHERS ]###


  else-pop:
    - match: (?=\S)
      pop: true

  else-pop-immediately:
    - match: ''
      pop: true

  else-invalid-symbol:
    - match: \S
      scope: invalid.sol

###[ COMMENTS ]###

  comments:
    # - include: comments-natspec-line
    - include: comments-line
    # - include: comments-natspec-block
    - include: comments-block

  comments-line:
    - match: //
      scope: punctuation.definition.comment.sol
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.double-slash.sol
        - match: \n
          pop: true

  comments-block:
    - match: (/\*)(\*/)
      captures:
        1: punctuation.definition.comment.begin.sol
        2: punctuation.definition.comment.end.sol
    - match: /\*
      scope: punctuation.definition.comment.begin.sol
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.sol
        - match: \*/
          scope: punctuation.definition.comment.end.sol
          pop: true
